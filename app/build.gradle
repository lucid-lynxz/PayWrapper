apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "../config/sign.gradle"

String wechatAppId = getLocalProperties("WECHAT_APP_ID", "请填入微信应用 appId")

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion

        applicationId "org.lynxz.paywrapper"
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release

            buildConfigField("String", "WECHAT_APP_ID", "\"" + wechatAppId + "\"")
            buildConfigField("String", "WECHAT_APP_SECRET", "\"" + getLocalProperties("WECHAT_APP_SECRET", "请填入微信应用 appSecret") + "\"")

            buildConfigField("String", "ALIPAY_APPID", "\"" + getLocalProperties("ALIPAY_APPID", "请填入支付宝应用 appId") + "\"")
            buildConfigField("String", "ALIPAY_RSA2_PRIVATE", "\"" + getLocalProperties("ALIPAY_RSA2_PRIVATE", "请填入支付宝应用rasv2加密密钥") + "\"")
            manifestPlaceholders = [WECHAT_APP_ID: wechatAppId]
        }
        release {
            initWith(debug)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation(test.junit)
    implementation(libs.kotlinLib)

    androidTestImplementation(test.espresso)
    androidTestImplementation(test.testRunner)

    implementation(libs.appcompat)
    implementation(libs.constraintLayout)
    implementation(libs.gson)

    if (useMavenVersion) {
        implementation "org.lynxz.basepaywrapper:basepaywrapper:$wrapperVersion"
        implementation "org.lynxz.wechatpaywrapper:wechatpaywrapper:$wrapperVersion"
        implementation "org.lynxz.alipaywrapper:alipaywrapper:$wrapperVersion"
    } else {
        implementation project(path: ":basepaywrapper")
        implementation project(path: ":wechatpaywrapper")
        implementation project(path: ":alipaywrapper")
    }

    implementation(libs.thirdClassGeneration)
    kapt(libs.thirdClassGeneration)
}


/**
 * 从指定的配置文件中读取属性值,若存在且类型与默认值匹配,则返回,否则返回默认值
 * @param propertyName 属性名
 * @param defaultValue 默认值
 * @param propertiesFileName 文件名,默认为: local.properteis
 */
def getLocalProperties(String propertyName, Object defaultValue,
                       String propertiesFileName = "local.properties") {
    File file = rootProject.file(propertiesFileName)
    if (!file.exists() || propertyName == null || propertyName.isEmpty()) {
        return defaultValue // 文件不存在或者属性名为空,则返回默认值
    }

    Properties properties = new Properties()
    properties.load(file.newInputStream())

    def localKeys = properties.keys()
    for (keyName in localKeys) {
        if (keyName != propertyName) continue
        def localValue = properties.getProperty(keyName)

        // 根据默认值类型进行类型转换
        if (defaultValue instanceof Integer) {
            return Integer.parseInt(localValue)
        } else if (defaultValue instanceof Boolean) {
            return Boolean.parseBoolean(localValue)
        } else if (defaultValue instanceof Double) {
            return Double.parseDouble(localValue)
        } else if (defaultValue instanceof Float) {
            return Float.parseFloat(localValue)
        } else if (defaultValue instanceof String || defaultValue instanceof GString) {
            return localValue
        }
    }
    // 类型不匹配,返回默认值
    return defaultValue
}